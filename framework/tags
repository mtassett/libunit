!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
BUFF_SIZE_GNL	inc/libft.h	/^# define BUFF_SIZE_GNL	/;"	d
CPU_RELAX	inc/libft.h	/^# define CPU_RELAX(/;"	d
CYA	inc/libunit.h	/^# define CYA	/;"	d
EFAILURE	inc/libunit.h	/^# define EFAILURE	/;"	d
EFORK	inc/libunit.h	/^# define EFORK	/;"	d
EWTF	inc/libunit.h	/^# define EWTF	/;"	d
GRN	inc/libunit.h	/^# define GRN	/;"	d
LIBFT_H	inc/libft.h	/^# define LIBFT_H$/;"	d
LIBUNIT_H	inc/libunit.h	/^# define LIBUNIT_H$/;"	d
RED	inc/libunit.h	/^# define RED	/;"	d
RST	inc/libunit.h	/^# define RST /;"	d
TAB0	inc/libft.h	/^# define TAB0 /;"	d
TAB1	inc/libft.h	/^# define TAB1 /;"	d
TAB2	inc/libft.h	/^# define TAB2 /;"	d
TAB3	inc/libft.h	/^# define TAB3 /;"	d
TAB4	inc/libft.h	/^# define TAB4 /;"	d
TAB5	inc/libft.h	/^# define TAB5 /;"	d
TAB6	inc/libft.h	/^# define TAB6 /;"	d
TAB7	inc/libft.h	/^# define TAB7 /;"	d
TAB8	inc/libft.h	/^# define TAB8 /;"	d
TAB9	inc/libft.h	/^# define TAB9 /;"	d
TABA	inc/libft.h	/^# define TABA /;"	d
TABB	inc/libft.h	/^# define TABB /;"	d
TABC	inc/libft.h	/^# define TABC /;"	d
UNIT_FAIL	inc/libunit.h	/^# define UNIT_FAIL(/;"	d
UNIT_TIMEOUT	inc/libunit.h	/^# define UNIT_TIMEOUT	/;"	d
UNIT_TOT	inc/libunit.h	/^# define UNIT_TOT(/;"	d
UTOA	inc/libft.h	/^# define UTOA /;"	d
YLW	inc/libunit.h	/^# define YLW	/;"	d
content_size	inc/libft.h	/^	size_t			content_size;$/;"	m	struct:s_btree
content_size	inc/libft.h	/^	size_t			content_size;$/;"	m	struct:s_dlst
content_size	inc/libft.h	/^	size_t			content_size;$/;"	m	struct:s_list
content	inc/libft.h	/^	void			*content;$/;"	m	struct:s_btree
content	inc/libft.h	/^	void			*content;$/;"	m	struct:s_dlst
content	inc/libft.h	/^	void			*content;$/;"	m	struct:s_list
getnsiz	src/unit_print.c	/^static inline size_t	getnsiz(int n)$/;"	f	file:
left	inc/libft.h	/^	struct s_btree	*left;$/;"	m	struct:s_btree	typeref:struct:s_btree::s_btree
n_buf	inc/libft.h	/^	char			*n_buf;$/;"	m	struct:s_node
n_fd	inc/libft.h	/^	int				n_fd;$/;"	m	struct:s_node
next	inc/libft.h	/^	struct s_dlst	*next;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
next	inc/libft.h	/^	struct s_list	*next;$/;"	m	struct:s_list	typeref:struct:s_list::s_list
prev	inc/libft.h	/^	struct s_dlst	*prev;$/;"	m	struct:s_dlst	typeref:struct:s_dlst::s_dlst
print_line	src/unit_run.c	/^static void		print_line(const char *str)$/;"	f	file:
print_result	src/unit_run.c	/^static int	print_result(int wstatus)$/;"	f	file:
print_sig	src/unit_run.c	/^static int		print_sig(int sig)$/;"	f	file:
right	inc/libft.h	/^	struct s_btree	*right;$/;"	m	struct:s_btree	typeref:struct:s_btree::s_btree
s_btree	inc/libft.h	/^typedef struct		s_btree$/;"	s
s_dlst	inc/libft.h	/^typedef struct		s_dlst$/;"	s
s_list	inc/libft.h	/^typedef struct		s_list$/;"	s
s_node	inc/libft.h	/^typedef struct		s_node$/;"	s
s_siz	inc/libft.h	/^	size_t			s_siz;$/;"	m	struct:s_sstr
s_sstr	inc/libft.h	/^typedef struct		s_sstr$/;"	s
s_str	inc/libft.h	/^	char			*s_str;$/;"	m	struct:s_sstr
s_unit	inc/libunit.h	/^typedef struct		s_unit$/;"	s
s_vec	inc/libft.h	/^typedef struct		s_vec$/;"	s
t_btree	inc/libft.h	/^}					t_btree;$/;"	t	typeref:struct:s_btree
t_dlst	inc/libft.h	/^}					t_dlst;$/;"	t	typeref:struct:s_dlst
t_int128	inc/libft.h	/^typedef __int128_t	t_int128;$/;"	t
t_list	inc/libft.h	/^}					t_list;$/;"	t	typeref:struct:s_list
t_node	inc/libft.h	/^}					t_node;$/;"	t	typeref:struct:s_node
t_str	inc/libft.h	/^}					t_str;$/;"	t	typeref:struct:s_sstr
t_uint128	inc/libft.h	/^typedef	__uint128_t	t_uint128;$/;"	t
t_unit	inc/libunit.h	/^}					t_unit;$/;"	t	typeref:struct:s_unit
t_vec	inc/libft.h	/^}					t_vec;$/;"	t	typeref:struct:s_vec
u_name	inc/libunit.h	/^	const char		*u_name;$/;"	m	struct:s_unit
u_next	inc/libunit.h	/^	struct s_unit	*u_next;$/;"	m	struct:s_unit	typeref:struct:s_unit::s_unit
u_ret	inc/libunit.h	/^	int				u_ret;$/;"	m	struct:s_unit
u_test	inc/libunit.h	/^	int				(*u_test)(void);$/;"	m	struct:s_unit
unit_exec	src/unit_run.c	/^static void	unit_exec(t_unit *list)$/;"	f	file:
unit_free	src/unit_free.c	/^void	unit_free(t_unit *unit)$/;"	f
unit_load	src/unit_load.c	/^int		unit_load(t_unit **alst, const char *name, int (*test_fun)(void))$/;"	f
unit_log	src/unit_log.c	/^void					unit_log(t_unit *unit, int reset)$/;"	f
unit_out	src/unit_out.c	/^uint32_t	unit_out(t_unit **first, int total, int fail)$/;"	f
unit_print	src/unit_print.c	/^int						unit_print(uint32_t r)$/;"	f
unit_run	src/unit_run.c	/^int		unit_run(t_unit *list, int *tot)$/;"	f
unit_strlen	src/unit_log.c	/^static inline size_t	unit_strlen(const char *str)$/;"	f	file:
v_data	inc/libft.h	/^	void			**v_data;$/;"	m	struct:s_vec
v_lim	inc/libft.h	/^	size_t			v_lim;$/;"	m	struct:s_vec
v_siz	inc/libft.h	/^	size_t			v_siz;$/;"	m	struct:s_vec
write_num	src/unit_print.c	/^static void				write_num(int i)$/;"	f	file:
write_result	src/unit_log.c	/^static inline void		write_result(int res, int fd)$/;"	f	file:
